[ 수업 목표 ]
1. 오류 및 예외의 개념에 대해서 이해합니다.
2. 예외 클래스 구조를 이해하고 동작하는 방식을 이해합니다.
3. 예외 발생시 try-catch, finally 문으로 다루는 방법을 배웁니다.
4. 예외를 직접 발생시키는 방법을 배워봅니다.
5. 예외 클래스의 구조가 자바에서 어떻게 구현되어있는지 알아봅니다.
6. 실질적으로 어떻게 예외를 고려하여 프로그래밍을 하는지 알아봅니다.
7. Generic 문법이 왜 필요한지, 어떠한 효용이 있는지 배웁니다.
8. Generic의 세부적인 문법을 배웁니다.
9. 가장 대표적인 Generic의 사용 예시 중 하나인 Collection이 어떻게 구현되어있는지 알아봅니다.
10. Wrapper 객체에 대하여 알아봅니다.

1. 오류 및 예외에 대한 이해
 - 프로그램이 직면하는 문제 상황들
  아무리 좋은 프로그래머라도 모든 것을 컨트롤 할 수 는 없습니다. 완벽한 프로그램이란 것은 없을 뿐더러, 완벽한 프로그램도 제어하지 못하는 문제는
  발생합니다. 예를 들어 어러분이 특정한 숫자를 입력받아 그 숫자의 두배를 반환하는 아주 간단하지만 완벽해 보이는 프로그램을 개발했다고 해도 문제
  는 발생합니다. 예를들어...
  1) 사용자가 숫자가 아닌 문자를 입력한다거나,
  2) 여러분의 프로그램의 메모리가 감당 할 수 없는 숫자가 입력된다거나,
  3) 여러분의 프로그램을 돌리는 컴퓨터에 메모리가 부족하다거나

  하는 상황이 있을 수 있겠죠. 이러한 문제 상황은 프로그램의 한 부분을 차지하고 있으며, 이번 장은 자바에서 이러한 문제 상황을
  어떻게 다뤄야 할지 이야기 합니다.

  힌트를 드리자면, 우리가 위에서 발생한 것 같은 문제를 "정의" 하는 것에서 시작합니다. 그리고 그 정의가 정교할수록 우리가 "대응"할 여지가 많아집니다.
  예를들어...
  1) 사용자가 숫자가 아닌 입력을 할 상황을 예견해 예외로 규정하고,
  2) 메모리가 부족한 상황을 정의해 이러한 상황을 오류로 규정한다면,

  우리가 예외상황에 대한 처리를 코드로 미리 해둘 수 있고, 오류가 발생했다면 어떠한 오류와 함께 프로그램이 종료 되었는지를 알게 돼서 해당 오류에
  대응 할 수 있습니다.

  숫자가 아닌 입력에는 오류메세지를 띄우고, 오류를 보고 난 이후에는 더 풍부한 메모리를 가진 컴퓨타에서 프로그램을 돌린다면, 아직도 완벽하지
  않지만 그래도 조금 더 완벽에 가까운 프로그램이겠죠??
