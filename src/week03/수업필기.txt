객체란?
 객체는 세상에 존재하는 물체를 뜻하며 식별이 가능한 것을 의미합니다.
    - 예를 들자면 물리적으로 존재하는 자동차, 도서관, 계산기를 객체라 볼 수 있습니다.
    - 강의, 배달주문, 운동과 같은 개념적인 것 또한 식별이 가능하기 때문에 객차라 볼 수 있습니다.
 자동차를 기반으로 하여 객체에 대해 좀 더 자세하게 살펴보겠습니다.
 객체는 속성과 행위로 구성되어 있습니다.
    - 자동차의 속성과 행위를 표현해 보겠습니다.
        1) 자동차는 회사, 모델, 색상, 가격, 속도 등의 속성을 가질 수 있습니다.
        2) 자동차는 가속, 브레이크, 기어변속, 조명, 경적등의 행위를 가질 수 있습니다.
 JAVA에서는 이러한 속성과 행위를 필드와 메서드로 정의하여 구현할 수 있습니다.
 이처럼 현실 세계에 있는 객체를 소프트웨어의 객체로 설계하는 것을 '객체 모델링' 이라고 부릅니다.

객체 간의 협력
 현실세계에서 사람이라는 객체와 자동차라는 객체는 서로 행위를 통해 상호작용을 하며 협력 할 수 있습니다.
    - 사람이 자동차의 가속 페달을 밟으면 자동차는 이에 반응하여 속도를 올리며 앞으로 이동합니다.
    - 사람이 자동차의 브레이크 페달을 밟으면 자동차는 이에 반응하여 속도를 줄이며 정지합니다.
 그렇다면 소프트웨어의 객체들 끼리는 어떻게 상호 작용을 할 수 있을까요?
    - 바로 행위를 정의하는 Java의 메서드를 통해 이루어집니다.
    - 사람 객체는 자동차 객체가 가지고있는 가속 페달 이라는 메서드 gasPedal(); 를 호출합니다.
        1) 그러면 자동차 객체는 이에 반응하여 속도 속성의 값을 증가 시킵니다.
    - 사람 객체는 자동차 객체가 가지고 있는 브레이크 페달이라는 메서드 brakePedal(); 를 호출합니다.
        1) 그러면 자동차 객체는 이에 반응하여 속도 속성의 값을 갑소 시킵니다.
 또한 소프트웨어의 객체들은 메서드를 통해 데이터를 주고 받을 수도 있습니다.
 사람 객체는 메서드를 호출할 때 괄호() 안에 데이터를 넣어 호출할 수 있는데 이때 이 괄호안에 넣는 데이터를 '파라미터' 혹은
 '매개값' 이라고 표현합니다.
 사람 객체는 gasPedal(50); 이렇게 메서드 괄호 안에 50의 매개값을 넣어 호출합니다.
    - 그러면 자동차 객체는 해당하는 50의 데이터를 전달 받아 자동차 객체의 속서인 속도의 값을 50으로 만듭니다.
    - 또한 자동차 객체는 gasPedal(50); 메서드에서 속도를 받꾸는 작업을 수행한 후 사람 객체에게 실행 결과인 속도의 값을
      받환할 수 있습니다. 이때 반환되는 값을 '리턴값' 이라 표현합니다.

객첵 간의 관계
 현실세계에서의 객체는 수많은 관계를 맺고 살아갑니다.
 예를 들어 위에서 살펴본 것 처럼 사람 객체는 자동차 객체를 사용하는 '사용의 관계'를 맺고 있습니다.
 자동차 객체를 통해서 소프트웨어의 객체 간의 관계에 대해 좀 더 자세하게 살펴보겠습니다.
 일전에 객체지향 프로그래밍은 필요한 부품들을 만들고 하나씩 조립해서 하나의 완성된 프로그램을 만드는 기법이라고 설명 드렸습니다.
 한번 현실세계의 자동차를 생각 해볼까요?
    - 현실세계에서 자동차를 만들기 위해서는 수많은 부품들이 필요합니다.
    - 예를 들어 자동차의 타어어, 차문, 핸들 등이 필요합니다.
 이를 소프트웨어의 객체 간의 관계로 표현해보겠습니다.
    - 사용 관계
        1) 사람 객체는 자동차 객체를 사용합니다.
    - 포함 관계
        2) 타어이 객체, 차문 객체, 핸들 객체는 자동차 객체에 포합되어있습니다.
    - 상속 관계
        1) 만약 공장에 자동차만 생산하는게 아니라 기차도 생산한다고 가졍해보겠습니다.
        2) 자동차와 기차 객체는 하나의 공통된 기계시스템 객체를 토대로 만들어진다고 가정해보겠습니다.
        3) 그렇다면 자동차 객체와 기차 객체는 기계시스템 객체를 상속 받는 상속 관계가 됩니다.

객체지향 프로그래밍의 특징
우리가 객체지향 프로그래밍을 하다보면 필연적으로 만나게 되는 개념이 있습니다.
    - 바로 캡슐화, 상속, 다향성, 추상화입니다.
    - 앞으로 학습하게 되는 내용에 포함되어 있기 때문에 간단하게 학습하고 가겠습니다.
1. 캡슐화
 -캡슐화란 속성(필드)와 행위(메서드)를 하나로 묶어 객체로 만든 후 실제 내부 구현 내용은 외부에서 알 수 없게 감추는 것을 의미합니다.
 -외부 객체에서는 캡슐화 된 객체의 내부 구조를 알 수 없기 때문에 노출시켜 준 필드 혹은 메서드를 통해 접근할 수 있습니다.
 -필드와 메서드를 캡슐화 하여 숨기는 이유는 외부객체에서 해당 필드와 메서드를 잘못 사용하여 객체가 변화하지 않게 하는데 있습니다.
 -Java에서는 캡슐화된 객체의 필드와 메서드를 노출 시킬지 감출 지 결정하기 위해 접근 제어자를 사용합니다.

2. 상속
 - 객체지향 프로그래밍에는 부모 객체와 자식 객체가 존재합니다.
 - 부모객체는 가지고 있는 필드와 메서드를 자식 객체에 물려주어 자식 객체가 이를 사용할 수 있도록 만들 수 있습니다.
 MachineSystem 이라는 객체 안에 Blue Print 라는 메서드가 있는데 이 메서드가 Car(자식 객체)와 Train(자식 객체)에 필요하다면
 MachineSystem(부모 객체)의 메서드가 수정이되면 자식 개체의 메서드도 변경이 됩니다.
 - 위와 같은 행위를 상속이라고 할 수 있는데 상속을 하는 이유는 다음과 같습니다.
    1) 각각의 객체들을 상속 관계로 묶음으로써 객체 간의 구조를 파악하기 쉬워집니다.
    2) 필드와 메서드를 변경하는 경우 부모 객체에 있는 것만 수정하게 되면 자식 객체 전부 반영이 되기 때문에 일관성을 유지하기 좋습니다.
    3) 자식 객체가 부모객체의 필드와 메서드를 물려받아 사용할 수 있기 때문에 코드의 중복이 줄어들며 코드의 재사용성이 증가됩니다.

3. 다형성
 객체가 연산을 수행할 때 하나의 행위에 대해 각 개체가 가지고 있는 고유한 특성에 따라 다른 여러가지 형태로 재구성 되는 것을 의미합니다.
 Car클래스를 토대로 자동차 객체를 만들 때 A자동차 객체와 B자동차 객체의 경적 소리가 다르다면 '경적을 울리다'라는 행위 즉, horn(); 메서드의
 구현을 다르게 재정의 하여 사용할 수 있습니다.

4. 추상화
 객체에서 공통된 부분들을 모아 상위 개념으로 새롭게 선언하는 것을 추상화라고 합니다.
    - 공통적이고 중요한 것들을 모아 객체를 모델링합니다.
    - 현실세게의 여러 종류의 자동차들이 공통적으로 가지고 있는 가속, 브레이크, 속도 와 같은 것들을 모아 자동차라는 객체를 모델링 할 수 있습니다.

객체와 클래스
 우리는 객체를 생성하기 위해서 설계도가 필요합니다.
 현실세계에서는 자동차를 만들기 위해 자동차 설계도를 토대로 자동차를 생산합니다.
 마찬가지로 소프트웨어에서도 객체를 만들기위해서는 설계도에 해당하는 클래스가 필요합니다.
 이때 클래스를 토대로 생성된 객체를 해당 클래스의 '인스턴스'라고 부르며 이 과정을 '인스턴스화'라고 부릅니다.
 동일한 클래스로 여러 개의 인스턴스를 만들 수 있습니다.
 이때 객체와 인스턴스는 거의 비슷한 표현이지만 자세하게 구분해보자면 Car공장(클래스) -> 자동차 객체 1,2,3 (자동차객체) 를 인스턴스라고 하며
 이 과정을 '인스턴스화'라고 한다.
 자동차 클래스를 통해 만들어진 하나의 자동차를 인스턴스라고 부르며 이러한 여러개의 인스턴스들을 크게 통틀어서 자동차 객체라고 표현할수있다.

메서드 오버로딩
 오버로딩은 함수가 하나의 기능만을 구현하는 것이 아니라 하나의 메서드 이름으로 여러 기능을 구현하도록 하는
 Java의 기능입니다.
 즉, 한 클래스 내에 이미 사용하려는 이름과 같은 이름을 가진 메서드가 있더라도, 매개변수의 개수 또는 타입, 순서가
 다르면 동일한 이름을 사용해서 메서드를 정의할 수 있습니다.

오버로딩의 조건
 - 메서드의 이름이 같고, 매개변수의 개수, 타입, 순서가 달라야 합니다!!
 - '응답 값만' 다른 것은 오버로딩을 할 수 없습니다.
 - 접근 제어자만 다른 것도 오버로딩을 할 수 없습니다.
 - 결론, 오버로딩은 매개변수의 차이로만 구현할 수 있습니다!!

 오버로딩의 장점
  1. 메서드 이름 하나로 상황에 따른 동작을 개별로 정의할 수 있습니다.
    a. 예를 들면 메세지 출력할 때 쓰는 println() 이 있습니다.
    b. println() 의 매개변수로는 int, double, String, boolean 등 다양하게 넣을 수 있습니다.
  2. 메서드의 이름을 절약할 수 있습니다.
    a. 만약 오버로딩이 안된다면 println() 는 printlnInt(), printlnDouble() 처럼 메서드명이 길어지고 낭비 되었을 것입니다.

  기본형 & 참조형 매개변수
  1. 기본형 매개변수
    메서드를 호출할 때 전달할 매개값으로 지정한 값을 메서드의 매개변수에 복사해서 전달합니다.
        1) 매개변수의 타입이 기본형일 때는 값 자체가 복사되어 넘어가기 때문에 매개값으로 지정된 변수의 원본 값이 변경되지 않습니다.
  2. 참조형 매개변수
    메서드를 호출할 때 전달할 매개값으로 지정한 값의 주소를 매개변수에 복사해서 전달합니다.
        1) 매개변수를 참조형으로 선언하면 값이 저장된 곳의 원본 주소를 알 수 있기 때문에 값을 읽어 오는 것은 물론 값을 변경하는 것도 가능합니다.
        2) 메서드의 매개변수 뿐만 아니라 반환타입도 참조형이 될 수 있습니다.
            - 반환타입이 참조형이라는 것은 반환ㅇ하는 값이 타입이 "실제값의 주소"라는 의미입니다.
